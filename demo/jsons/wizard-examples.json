[
	{
		"id": "single-step",
		"title":"Wizard with a single static step",
		"description":"This is an example of a wizard with a single step\n\n### Notes:\n\n* The template being displayed within the wizard is [hello-world](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/templates/hello-world.dust)\n\n* The `template` being rendered _as_ the wizard is [ simple-wizard-view.dust ]( https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/templates/simple-wizard-view.dust).\n\n* The wizard template defines a div with the class 'contentDiv'. This div is used to display the views associated with each step and so **should** be defined in the view for it to function as a wizard.\n\n* Another div with class `wizardActions` is used to contain the generic buttons which can be displayed on every page."
	},
	{
		"id": "two-step",
		"title":"Wizard with a two static steps",
		"description":"This is an example of a wizard with two steps\n\n### Notes:\n\n* The `templates` used in this wizard are [first-screen.dust](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/templates/first-screen.dust) and [second-screen.dust](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/templates/second-screen.dust).\n\n* The first screen has a `Next` button.An element with class `next` is necessary in the template. Clicking on it tells the wizard to execute the next step."
	},
	{
		"id": "two-step-dynamic",
		"title":"Wizard with a two dynamic steps",
		"description":"This example is very similar to the previous one. However the steps are of type `dynamic_view`\n\n### Notes:\n\n* The `views` used in this wizard are [first-screen-view.js](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/views/first-screen-view.js) and [second-screen-view.js](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/views/second-screen-view.js).\n\n* The view `first-screen-view` has an event handler to handle the user clicking on the `Next` button. Unlike static steps, **all event handling has to be coded for within dynamic views**.\n\n* The view can be as complex as necessary and can even show other screens etc. Once its job is done, it can invoke `this.options.viewPromise.resolve()` or `this.options.viewPromise.reject()` to hand back control to the wizard."
	},
	{
		"id": "branching-example",
		"title":"Wizard with branching",
		"description":"This is an example of branching within the wizard.\n\n### Notes:\n\n* For such branching, the step **has** to be of type: `dynamic_view`\n\n* The `view` used in the first screen of the wizard is [simple-decider-view.js](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/views/simple-decider-view.js).\n\n* The view ensures that the chosen value is put into `params`.\n\n* Within the step's next block this param is checked to decide which step to execute next.\n\n* See [dependency-checks](https://github.com/cloudmunch/marionette-wizard/wiki#dependency) for all the types of dependency checks possible."
	},
	{
		"id": "compose-example",
		"title":"A composed Wizard",
		"description":"This is an example of composing a wizard using several other JSONs.\n\n### Notes:\n\n* For such composition, the step **has** to be of type: `behavior`\n\n* The `behavior` used is [load-steps.js](https://github.com/cloudmunch/marionette-wizard/blob/gh-pages/demo/javascript/behaviors/load-steps.js).\n\n* Once the JSON to be included has been fetched, the behavior invokes `loadJSON( jsonContent )` to do the actual job of plugging in the steps.\n\n* In this example, the same JSON is included twice: demonstrating that\n\n  * The same JSON can be included more than once\n\n  * That more than one JSON can be included\n\n* It is also possible to change the behavior of the included steps at runtime. To do this, use the [replace](https://github.com/cloudmunch/marionette-wizard/wiki#compose-a-wizard) node"
	}
]